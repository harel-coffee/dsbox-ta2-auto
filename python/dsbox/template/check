d3m.primitives.common_primitives.BayesianLogisticRegression
====inputs==== <class 'd3m.container.numpy.ndarray'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.common_primitives.CSVFeatureExtractor
====inputs==== d3m.container.list.List[str]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.common_primitives.ConvolutionalNeuralNet
====inputs==== <class 'd3m.container.numpy.ndarray'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.common_primitives.DiagonalMVN
====inputs==== <class 'd3m.container.numpy.ndarray'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.common_primitives.FeedForwardNeuralNet
====inputs==== <class 'd3m.container.numpy.ndarray'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.common_primitives.ImageReader
====inputs==== d3m.container.list.List[str]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.common_primitives.KMeans
====inputs==== <class 'd3m.container.numpy.ndarray'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.common_primitives.LinearRegression
====inputs==== <class 'd3m.container.numpy.ndarray'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.common_primitives.Loss
====inputs==== <class 'd3m.container.numpy.ndarray'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.common_primitives.OneHotMaker
====inputs==== <class 'd3m.container.pandas.DataFrame'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.common_primitives.PCA
====inputs==== <class 'd3m.container.numpy.ndarray'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.common_primitives.RandomForestClassifier
====inputs==== <class 'd3m.container.numpy.ndarray'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.data.CastToType
====inputs==== <class 'd3m.container.pandas.DataFrame'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.data.ColumnParser
====inputs==== <class 'd3m.container.pandas.DataFrame'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.data.Concat
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.data.ConstructPredictions
====inputs==== <class 'd3m.container.pandas.DataFrame'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.data.DataframeColumnsDtypeFilter
====inputs==== <class 'd3m.container.pandas.DataFrame'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.data.ExtractAttributes
====inputs==== <class 'd3m.container.pandas.DataFrame'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.data.ExtractTargets
====inputs==== <class 'd3m.container.pandas.DataFrame'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.datasets.DatasetToDataFrame
====inputs==== <class 'd3m.container.dataset.Dataset'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.datasets.Denormalize
====inputs==== <class 'd3m.container.dataset.Dataset'>
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKARDRegression
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKBernoulliNB
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKDecisionTreeClassifier
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKDecisionTreeRegressor
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKDictVectorizer
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKExtraTreesClassifier
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKExtraTreesRegressor
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKFastICA
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKFeatureAgglomeration
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKGaussianNB
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKGaussianProcessRegressor
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKGenericUnivariateSelect
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKGradientBoostingClassifier
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKGradientBoostingRegressor
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKImputer
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKKNeighborsClassifier
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKKNeighborsRegressor
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKKernelPCA
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKLabelEncoder
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKLinearDiscriminantAnalysis
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKLinearSVC
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKLinearSVR
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKLogisticRegression
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKMinMaxScaler
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKMultinomialNB
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKNystroem
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKOneHotEncoder
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKPCA
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKPassiveAggressiveClassifier
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKPassiveAggressiveRegressor
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKPolynomialFeatures
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKQuadraticDiscriminantAnalysis
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKRBFSampler
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKRandomForestClassifier
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKRandomForestRegressor
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKRandomTreesEmbedding
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKRidge
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKSGDClassifier
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKSGDRegressor
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKSVC
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKSVR
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKSelectPercentile
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKStandardScaler
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
d3m.primitives.sklearn_wrap.SKTruncatedSVD
====inputs==== typing.Union[d3m.container.pandas.DataFrame, d3m.container.numpy.ndarray]
====outputs==== <class 'd3m.container.numpy.ndarray'>
